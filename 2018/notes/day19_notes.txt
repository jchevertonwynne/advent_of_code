addi 4 16 4 - START - set ins to 16 -> 17

seti 1 8 1 - LOOP START - set [1] to 1
seti 1 3 5 - set [5] to 1



mulr 1 5 3 - LOOP REPEAT - multiply [1] and [5] into [3]

[2] == [3] => [3] == [2]
eqrr 3 2 3 - check if [2] and [3] are equal and set [3] to result
addr 3 4 4 - if last: next ins else skip
addi 4 1 4 - add 1 to [4] - SKIPS NEXT INSTRUCTION
addr 1 0 0 - adds [1] into [0]

addi 5 1 5 - add 1 to [5]

[5] must be larger than [2] => [5] == 10551377
gtrr 5 2 3 - compare [5] and [2] and set [3] to result: => 0
addr 4 3 4 - if last: skip else next
seti 2 2 4 - LOOP END - set [4] to 2 and loop back



addi 1 1 1 - add 1 to [1]

gtrr 1 2 3 - check if [1] > [2] and store in [3]
addr 3 4 4 - skip next if [1] > [2]
seti 1 4 4 - loop back to start

[1] > [2] => [1] == 10551377
mulr 4 4 4 - END



addi 2 2 2 - BUILD UP CONSTANT - set to 2
mulr 2 2 2 - square constant => 4
mulr 4 2 2 - times constant by ip value: 4 * 19 => 76
muli 2 11 2 - times constant by 11: 76 * 11 => 836
addi 3 6 3 - set [3] to 6
mulr 3 4 3 - times [3] by [4]: 6 * 22 => 132
addi 3 8 3 - add 8 to [3]: 132 + 8 => 140
addr 2 3 2 - add [3] to [2]: 140 + 836 => 976
addr 4 0 4 - add [0] to [4]: 25 + 1 => 26 - SKIPS NEXT INSTRUCTION
seti 0 1 4 - SKIPPED
setr 4 4 3 - sets [3] to [4]: 140 => 27
mulr 3 4 3 - multiply [4] to [3]: 28 * 27 => 756
addr 4 3 3 - add [4] to [3]: 756 + 29 => 785
mulr 4 3 3 - multiply [4] to [3]: 785 * 30 -> 23550
muli 3 14 3 - multiply [3] by 14: 23550 * 14 => 329700
mulr 3 4 3 - multiply [3] by [4]: 329700 * 32 => 10550400
addr 2 3 2 - add [3] to [2]: 976 + 10550400 => 10551376
seti 0 4 0 - set [0] to 0
seti 0 7 4 - BUILD UP END - set[4] to 0 - LOOP BACK TO START